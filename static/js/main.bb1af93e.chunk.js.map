{"version":3,"sources":["fBase.js","utilities/DeleteButton.js","utilities/Modal.js","components/Category.js","components/CategoriesSection.js","components/SelectBgcolor.js","utilities/RadioComponent.js","utilities/useForm.js","utilities/validate.js","components/CategoryFactory.js","routes/Settings.js","components/TransactionFactory.js","utilities/printComma.js","components/Transaction.js","components/History.js","components/Balance.js","routes/Home.js","routes/Nav.js","routes/Router.js","components/Footer.js","App.js","utilities/changeBtnColor.js","index.js"],"names":["TRANSACTIONS","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","CATEGORIES","MAINCOLOR","dbService","firestore","DeleteButton","formType","itemId","onDeleteClick","a","window","confirm","doc","delete","className","onClick","Modal","header","contents","onToggleHandler","Category","category","useState","newCategoryText","setNewCategoryText","openModal","setOpenModal","prev","UpdateHandler","e","preventDefault","id","update","type","icon","faPencilAlt","onSubmit","value","onChange","target","faArrowCircleRight","CategoriesSection","categories","map","SelectBgcolor","SubmitBtn","currentMainColor","componentStyle","rules","newMainColor","setNewMainColor","saveColorOnDB","mainColor","bgColor","buttonColor","scrollbarColor","RadioComponent","values","changeHandler","slideRef","useRef","slideMoveHandler","slideDiv","current","classList","contains","remove","add","ref","htmlFor","name","useForm","initialValues","validate","setValues","errors","setErrors","isSubmit","setIsSubmit","setCategories","getCategories","collection","onSnapshot","snapshot","categoryArray","docs","data","length","addTransactionFB","obj","set","addCategoryFB","useEffect","event","submitHandler","transactionObj","date","Date","now","text","amount","categoryObj","test","CategoryFactory","required","placeholder","Settings","TransactionFactory","filter","disabled","numToString","num","toString","replace","Transaction","isNewDate","newText","setNewText","colorByType","History","copyTransactions","transactions","concat","sort","b","transaction","idx","Balance","total","returnedAmount","reduce","acc","cur","income","parseInt","expense","Home","setTransactions","refNewBtn","transactionArray","document","getElementById","toggle","container","Nav","location","useLocation","title","pathname","to","AppRouter","exact","path","Footer","getFullYear","App","setMainColor","setBgColor","styled","input","changeBtnColor","dbColor","styles","forBg","backgroundColor","style","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bb1af93e.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\"; \r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDR8tvZ_nXU_Yvf3m9fDSstpav1n0HCJGc\",\r\n    authDomain: \"expense-tracker-91c95.firebaseapp.com\",\r\n    projectId: \"expense-tracker-91c95\",\r\n    storageBucket: \"expense-tracker-91c95.appspot.com\",\r\n    messagingSenderId: \"982156523497\",\r\n    appId: \"1:982156523497:web:1f3a7dca886f9d5a4b3d78\"\r\n  };\r\n\r\n  export default firebase.initializeApp(firebaseConfig);\r\n\r\n  export const TRANSACTIONS = \"transactions\";\r\n  export const CATEGORIES = \"categories\";\r\n  export const MAINCOLOR = \"mainColor\"\r\n\r\n  export const dbService = firebase.firestore();","import { TRANSACTIONS, dbService, CATEGORIES } from 'fBase';\r\nimport React from 'react';\r\n\r\nfunction DeleteButton({ formType, itemId }) {\r\n    const onDeleteClick = async() => {\r\n        const yes = window.confirm(\"내역을 삭제하시겠습니까?\");\r\n\r\n        if(yes){\r\n\r\n            if(formType === TRANSACTIONS){\r\n                await dbService.doc(`${TRANSACTIONS}/${itemId}`).delete();\r\n            }\r\n            else if(formType === CATEGORIES){\r\n                await dbService.doc(`${CATEGORIES}/${itemId}`).delete();\r\n            }\r\n            \r\n        }\r\n    }\r\n    return (\r\n        <button className=\"eventButton\" onClick={onDeleteClick}>X</button>\r\n    )\r\n}\r\n\r\nexport default DeleteButton\r\n","import React from 'react'\r\n\r\nfunction Modal({header, contents, onToggleHandler}) {\r\n  return (\r\n    <>\r\n      {/* <div id=\"coverBackground\"></div> */}\r\n      <div className=\"modal\">\r\n        <div className=\"modalContents\">\r\n          <h4>{header}</h4>\r\n          <button onClick={onToggleHandler}>X</button>\r\n        </div>\r\n        <div className=\"modalContents flexColumn\">{contents}</div>\r\n        \r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Modal\r\n\r\n","import React, {useState} from 'react';\r\nimport { CATEGORIES, dbService } from 'fBase';\r\nimport DeleteButton from 'utilities/DeleteButton';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt, faArrowCircleRight } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Modal from 'utilities/Modal';\r\n\r\nfunction Category({ category }) {\r\n    const [newCategoryText, setNewCategoryText] = useState(category.category);\r\n    const [openModal, setOpenModal] = useState(false);\r\n\r\n    const onToggleHandler = () => {\r\n        setOpenModal(prev => !prev);\r\n    };\r\n\r\n    const onTextHandler = (e) => {\r\n        setNewCategoryText(e.target.value);\r\n    }\r\n\r\n    const UpdateHandler = async(e) => {\r\n        e.preventDefault();\r\n        setOpenModal(false);\r\n        await dbService.doc(`${CATEGORIES}/${category.id}`).update({\r\n            category: newCategoryText,\r\n        });\r\n        \r\n    }\r\n    return (\r\n      <>\r\n        <tr>\r\n          <td>\r\n            <DeleteButton formType={CATEGORIES} itemId={category.id} />\r\n          </td>\r\n          <td>{category.type}</td>\r\n          <td>{category.category}</td>\r\n          <td>\r\n            <button onClick={onToggleHandler} className=\"deleteBtn\">\r\n              <FontAwesomeIcon icon={faPencilAlt} />\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      \r\n          {openModal && (\r\n            <Modal\r\n              header=\"카테고리 수정\"\r\n              onToggleHandler={onToggleHandler}\r\n              contents={\r\n                <>\r\n                  <p>\r\n                    {`${category.type} - `} <span>{category.category}</span>\r\n                  </p>\r\n                  <form onSubmit={UpdateHandler}>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={newCategoryText}\r\n                      onChange={onTextHandler}\r\n                      className=\"input\"\r\n                    />\r\n                    <button className=\"modalSubmitButton\">\r\n                      <FontAwesomeIcon icon={faArrowCircleRight} />\r\n                    </button>\r\n                  </form>\r\n                </>\r\n              }\r\n            />\r\n          )}\r\n        \r\n      </>\r\n    );\r\n}\r\n\r\nexport default Category\r\n","import React from 'react';\r\nimport Category from 'components/Category';\r\n\r\nfunction CategoriesSection({ categories}) {\r\n\r\n  \r\n    return (\r\n      <>\r\n        <div className=\"listTable\">\r\n        <h3>Category List</h3>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>삭제</th>\r\n              <th>TYPE</th>\r\n              <th>CONTENTS</th>\r\n              <th>수정</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {categories &&\r\n              categories.map((category) => {\r\n                return <Category key={category.id}  category={category}/>;\r\n              })}\r\n          </tbody>\r\n        </table>\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default CategoriesSection\r\n","import { dbService, MAINCOLOR } from 'fBase';\r\nimport React, {useState} from 'react'\r\n\r\nfunction SelectBgcolor({ SubmitBtn }) {\r\n    const currentMainColor = SubmitBtn.componentStyle.rules[1];\r\n    const [newMainColor, setNewMainColor] = useState(`${currentMainColor}`);\r\n\r\n    const saveColorOnDB = async() => {\r\n        await dbService.doc(`${MAINCOLOR}/mainColor`).update({\r\n            mainColor: newMainColor,\r\n            bgColor: `${newMainColor}77`,\r\n            buttonColor: newMainColor,\r\n            scrollbarColor: newMainColor,\r\n        });\r\n    }\r\n\r\n    const changeColor = (e) => {\r\n        const {value} = e.target;\r\n        setNewMainColor(value);\r\n    }\r\n                                                                                                                                                                                                                                                               \r\n    const onSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n        saveColorOnDB();\r\n    }\r\n    return (\r\n      <div id=\"selectColorContainer\">\r\n        <h4>메인 컬러</h4>\r\n        <form onSubmit={onSubmitHandler} className=\"selectColorForm\">\r\n          <input type=\"color\" onChange={changeColor} value={newMainColor} />\r\n          <SubmitBtn type=\"submit\" className=\"button\" value=\"Apply\"></SubmitBtn>\r\n        </form>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default SelectBgcolor\r\n","import React, {useRef} from 'react'\r\n\r\nfunction RadioComponent({values, changeHandler}) {\r\n\r\n    const slideRef = useRef();\r\n\r\n    const slideMoveHandler = () => {\r\n      const slideDiv = slideRef.current;\r\n      if(!slideDiv.classList.contains('toRight')){\r\n        slideDiv.classList.remove('toLeft');\r\n        slideDiv.classList.add('toRight');\r\n      } else {\r\n        slideDiv.classList.remove('toRight');\r\n        slideDiv.classList.add('toLeft');\r\n      }\r\n\r\n      \r\n    }\r\n\r\n    \r\n\r\n    return (\r\n      <>  \r\n        <div className=\"radios\" >\r\n          <div className=\"checked\" ref={slideRef}></div>\r\n          <label htmlFor=\"typePlus\" className=\"radioLabels\" onClick={slideMoveHandler}>+</label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"type\"\r\n            id=\"typePlus\"\r\n            className=\"transactionType\"\r\n            value=\"수입\"\r\n            onChange={changeHandler}\r\n          />\r\n          <label htmlFor=\"typeMinus\" className=\"radioLabels\" onClick={slideMoveHandler}>-</label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"type\"\r\n            id=\"typeMinus\"\r\n            className=\"transactionType\"\r\n            value=\"지출\"\r\n            onChange={changeHandler}\r\n          />\r\n          \r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default RadioComponent\r\n","import {useState, useEffect} from 'react';\r\nimport {CATEGORIES, dbService, TRANSACTIONS} from 'fBase';\r\n\r\nfunction useForm({ initialValues, onSubmit, validate}) {\r\n    const [values, setValues] = useState(initialValues);\r\n    const [errors, setErrors] = useState(\"\");\r\n    const [isSubmit, setIsSubmit] = useState(false);\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    const getCategories = async() => {\r\n        await dbService.collection(CATEGORIES).onSnapshot((snapshot) => {\r\n          const categoryArray = snapshot.docs.map((doc) =>({\r\n            id: doc.id,\r\n            ...doc.data(),\r\n          }))\r\n          setCategories(categoryArray);\r\n        });\r\n      };\r\n\r\n    if(categories.length === 0 ){ //첫 렌더링 때, 모든 카테고리 목록을 가져오기 위한 조건문\r\n        getCategories();\r\n    }\r\n    \r\n    const addTransactionFB = async(obj) => {\r\n        await dbService.collection(TRANSACTIONS).doc(`${obj.id}`).set(obj);\r\n    };\r\n\r\n    const addCategoryFB = async(obj) => {\r\n        await dbService.collection(CATEGORIES).add(obj);\r\n    }\r\n\r\n    const changeHandler = (event) => {\r\n        const {name, value} = event.target;\r\n        setValues({ ...values, [name]: value});\r\n        setIsSubmit(false);\r\n        // setErrors(validate(values));\r\n    };\r\n\r\n    //get categories from db by category type\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault()\r\n        setIsSubmit(true);\r\n        setErrors(validate(values));\r\n        \r\n        if(values.formType === TRANSACTIONS){\r\n            const transactionObj = {\r\n            type: values.type,\r\n            date: values.date,\r\n            id: Date.now(),\r\n            text: values.text,\r\n            amount: +values.amount, //type이 number로 db에 저장\r\n            category: values.category\r\n            };\r\n\r\n            addTransactionFB(transactionObj);\r\n        } \r\n        \r\n        else if(values.formType === CATEGORIES){\r\n\r\n            const categoryObj = {\r\n                type: values.type,\r\n                category: values.category\r\n            }\r\n            addCategoryFB(categoryObj);\r\n        }\r\n\r\n      setValues(initialValues);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(isSubmit) {\r\n            onSubmit(values);\r\n        } \r\n        setIsSubmit(false);\r\n    }, []);\r\n\r\n    return {\r\n        values,\r\n        errors,\r\n        isSubmit,\r\n        changeHandler,\r\n        submitHandler,\r\n        categories,\r\n        getCategories\r\n    \r\n    }\r\n}\r\n\r\nexport default useForm;","export default function validate({ date, amount}){\r\n    const errors = {};\r\n\r\n    if(!date){\r\n        errors.date = \"날짜를 입력해주세요.\";\r\n    } else {\r\n        errors.date = null;\r\n    }\r\n    \r\n    if(!/^[0-9]/.test(amount)){\r\n        errors.amount = \"금액에는 숫자만 입력해주세요.\";\r\n    } else{\r\n        errors.amount = null;\r\n    }\r\n\r\n    return errors;\r\n}","import React from 'react'\r\nimport RadioComponent from 'utilities/RadioComponent';\r\nimport useForm from 'utilities/useForm';\r\nimport validate from 'utilities/validate';\r\nimport {CATEGORIES} from 'fBase';\r\n\r\nfunction CategoryFactory({ SubmitBtn }) {\r\n    const { values, changeHandler, submitHandler} = useForm({\r\n        initialValues: {formType: CATEGORIES, type: \"지출\", category: \"\"},\r\n        onSubmit: (values) => {},\r\n        validate\r\n        });\r\n    return (\r\n      <form onSubmit={submitHandler} className=\"categoryForm\">\r\n        <h3>New Category</h3>\r\n        <RadioComponent values={values} changeHandler={changeHandler} />\r\n        <p>\r\n          <label htmlFor=\"category\">Contents</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"input\"\r\n            name=\"category\"\r\n            required\r\n            value={values.category}\r\n            onChange={changeHandler}\r\n            placeholder=\"Enter contents...\"\r\n          />\r\n\r\n          <SubmitBtn\r\n            type=\"submit\"\r\n            className=\"button\"\r\n            name=\"submit\"\r\n            value=\"+\"\r\n          ></SubmitBtn>\r\n        </p>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default CategoryFactory\r\n","import CategoriesSection from 'components/CategoriesSection'\r\nimport SelectBgcolor from 'components/SelectBgcolor';\r\nimport CategoryFactory from \"components/CategoryFactory\";\r\nimport React from 'react'\r\n\r\nfunction Settings({categories, SubmitBtn}) {\r\n\r\n    return (\r\n        <>\r\n         <article id=\"settingSection\" className=\"mainContainer\">\r\n            <CategoryFactory SubmitBtn={SubmitBtn}/>\r\n             <CategoriesSection categories={categories} />\r\n             <SelectBgcolor SubmitBtn={SubmitBtn}/>\r\n        </article>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings\r\n","import React from 'react';\r\nimport useForm from 'utilities/useForm';\r\nimport validate from 'utilities/validate';\r\nimport RadioComponent from '../utilities/RadioComponent';\r\nimport {TRANSACTIONS} from \"fBase\";\r\n\r\nfunction TransactionFactory({ SubmitBtn }) {\r\n  const {\r\n    values,\r\n    errors,\r\n    isSubmit,\r\n    changeHandler,\r\n    submitHandler,\r\n    categories,\r\n  } = useForm({\r\n    initialValues: {\r\n      formType: TRANSACTIONS,\r\n      type: \"지출\",\r\n      date: \"\",\r\n      text: \"\",\r\n      amount: 0,\r\n      category: \"\",\r\n    },\r\n    onSubmit: (values) => {},\r\n    validate,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={submitHandler}>\r\n        <h3>Add New Transaction</h3>\r\n        <RadioComponent values={values} changeHandler={changeHandler} />\r\n        <fieldset className=\"formFieldset\">\r\n          <select name=\"category\" onChange={changeHandler}>\r\n            <option>카테고리를 선택해주세요.</option>\r\n            {categories &&\r\n              categories\r\n                .filter((e) => e.type === values.type)\r\n                .map((e) => {\r\n                  return (\r\n                    <option key={e.id} value={e.category}>\r\n                      {e.category}\r\n                    </option>\r\n                  );\r\n                })}\r\n          </select>\r\n\r\n          <p>\r\n            <label htmlFor=\"date\">Date</label>\r\n            {errors.date && <span>{errors.date}</span>}\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              value={values.date}\r\n              onChange={changeHandler}\r\n              required\r\n              className=\"input\"\r\n            />\r\n          </p>\r\n          <p>\r\n            <label htmlFor=\"text\">Text</label>\r\n            <input\r\n              type=\"text\"\r\n              value={values.text}\r\n              onChange={changeHandler}\r\n              name=\"text\"\r\n              id=\"text\"\r\n              placeholder=\"Enter text\"\r\n              required\r\n              className=\"input\"\r\n            />\r\n          </p>\r\n          <p>\r\n            <label htmlFor=\"amount\">Amount</label>\r\n            {errors.amount && <span>{errors.amount}</span>}\r\n            <input\r\n              type=\"number\"\r\n              id=\"amount\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={changeHandler}\r\n              required\r\n              className=\"input\"\r\n            />\r\n          </p>\r\n          <SubmitBtn\r\n            type=\"submit\"\r\n            id=\"transactionSubmitBtn\"\r\n            className=\"button\"\r\n            value=\"Add transaction\"\r\n            disabled={isSubmit}\r\n          ></SubmitBtn>\r\n        </fieldset>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TransactionFactory\r\n","export default function numToString(num){\r\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  };","import React, { useState } from \"react\";\r\nimport DeleteButton from \"utilities/DeleteButton\";\r\nimport Modal from \"utilities/Modal\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPencilAlt,\r\n  faArrowCircleRight,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { TRANSACTIONS, dbService } from \"fBase\";\r\nimport numToString from \"utilities/printComma\";\r\n\r\nfunction Transaction({ transactionObj, isNewDate }) {\r\n  const [newText, setNewText] = useState(transactionObj.text);\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const type = transactionObj.type;\r\n  // const refBtns = useRef();\r\n\r\n  const onToggleHandler = () => {\r\n    setOpenModal((prev) => !prev);\r\n  };\r\n\r\n  const UpdateHandler = async (e) => {\r\n    e.preventDefault();\r\n    setOpenModal(false);\r\n\r\n    await dbService.doc(`${TRANSACTIONS}/${transactionObj.id}`).update({\r\n      text: newText,\r\n    });\r\n  };\r\n\r\n  const onTextHandler = (e) => {\r\n    setNewText(e.target.value);\r\n  };\r\n\r\n  let colorByType = \"\";\r\n\r\n  if (type === \"수입\") {\r\n    colorByType = \"moneyPlus\";\r\n  } else if (type === \"지출\") {\r\n    colorByType = \"moneyMinus\";\r\n  }\r\n\r\n  const showBtnContainer = () => {\r\n    // refBtns.current.classList.toggle(\"clickedBtnContainer\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isNewDate ? <p className=\"date\">{transactionObj.date}</p> : \"\"}\r\n      <div\r\n        className={`${colorByType} transactionContainer`}\r\n        onClick={showBtnContainer}\r\n      >\r\n        <div className=\"buttonContainer\">\r\n          <DeleteButton formType={TRANSACTIONS} itemId={transactionObj.id} />\r\n         \r\n          <button onClick={onToggleHandler} className=\"eventButton\">\r\n            <FontAwesomeIcon icon={faPencilAlt} />\r\n          </button>\r\n          </div>\r\n     \r\n        <div className=\"transactionContents\">\r\n          <span className=\"text\">\r\n            {transactionObj.text}\r\n            <span className=\"category\">{transactionObj.category}</span>\r\n          </span>\r\n          <span className=\"amount\">{numToString(transactionObj.amount)}원</span>\r\n        </div>\r\n      </div>\r\n      {openModal && (\r\n            <Modal\r\n              header=\"거래 내역 수정\"\r\n              onToggleHandler={onToggleHandler}\r\n              contents={\r\n                <>\r\n                  <p>{`${transactionObj.date} / ${transactionObj.type} / `} \r\n                  <span>{transactionObj.text}</span>\r\n                  {` / ${transactionObj.amount}`}</p>\r\n                  <form onSubmit={UpdateHandler}>\r\n \r\n                    <input\r\n                      type=\"text\"\r\n                      value={newText}\r\n                      onChange={onTextHandler}\r\n                      className=\"input\"\r\n                    />\r\n                    <button className=\"modalSubmitButton\">\r\n                      <FontAwesomeIcon icon={faArrowCircleRight} />\r\n                    </button>\r\n                  </form>\r\n                </>\r\n              }\r\n            />\r\n          )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Transaction;\r\n","import React from 'react';\r\nimport Transaction from \"components/Transaction\";\r\n\r\nfunction History({ transactions }) {\r\n\r\n    const copyTransactions = transactions.concat();\r\n\r\n    copyTransactions.sort((a, b) => { //sorting by date (desc)\r\n      return a.date > b.date ? -1 : 1;\r\n    });\r\n\r\n\r\n    return (\r\n      <article id=\"historyComponent\" className=\"mainContainer\">\r\n        <section>\r\n        <h3>History</h3>\r\n        \r\n          {copyTransactions &&\r\n            copyTransactions.map((transaction, idx) => {\r\n              let isNewDate = true;\r\n              if (idx === 0) {\r\n                //맨 최근 거래내역 날짜 추가 위한 조건문\r\n                isNewDate = true;\r\n              } else if (idx > 0 && idx < copyTransactions.length - 1) {\r\n                if (transaction.date !== copyTransactions[idx - 1].date) {\r\n                  isNewDate = true;\r\n                } else {\r\n                  isNewDate = false;\r\n                }\r\n              }\r\n              return (\r\n                <Transaction\r\n                  key={transaction.id}\r\n                  transactionObj={transaction}\r\n                  isNewDate={isNewDate}\r\n                />\r\n              );\r\n            })}\r\n        </section>\r\n        \r\n      </article>\r\n    );\r\n}\r\n\r\nexport default History\r\n","import React from \"react\";\r\nimport numToString from 'utilities/printComma';\r\n\r\nfunction Balance({ transactions }) {\r\n  const copyTransactions = transactions.concat();\r\n\r\n    const total = numToString(copyTransactions\r\n                      .map((e) => {\r\n                          let returnedAmount = 0;\r\n                          if(e.type === '수입') { returnedAmount = +e.amount}\r\n                          else if(e.type === '지출') { returnedAmount = -e.amount}\r\n                          return returnedAmount\r\n                      }) // return amount with +/- set by type\r\n                      .reduce((acc, cur) => (acc += cur), 0)); //get total\r\n  \r\n\r\n  const income = numToString(copyTransactions\r\n    .filter((e) => e.type === \"수입\") //filter by type\r\n    .map((e) => parseInt(e.amount)) // return only amount which is changed string to int\r\n    .reduce((acc, cur) => (acc += cur), 0)); //get total\r\n\r\n  const expense = numToString(copyTransactions\r\n    .filter((e) => e.type === \"지출\")\r\n    .map((e) => parseInt(e.amount))\r\n    .reduce((acc, cur) => (acc += cur), 0));\r\n\r\n    \r\n\r\n  return (\r\n    <article className=\"balanceComponent\">\r\n      <section className=\"balanceSection\">\r\n        <p className=\"subTitle\">YOUR BALANCE</p>\r\n        <p id=\"money\">{total}원</p>\r\n      </section>\r\n      <div>\r\n        <section className=\"balanceSection income \">\r\n          <p className=\"subTitle\">INCOME</p>\r\n          <p className=\"money plus\">\r\n            +{income}원\r\n          </p>\r\n        </section>\r\n        <section className=\"balanceSection expense\">\r\n          <p className=\"subTitle\">EXPENSE</p>\r\n          <p className=\"money minus\">\r\n            -{expense}원\r\n          </p>\r\n        </section>\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default Balance;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport TransactionFactory from 'components/TransactionFactory';\r\nimport History from 'components/History';\r\nimport Balance from 'components/Balance';\r\nimport {dbService, TRANSACTIONS} from 'fBase';\r\n\r\n\r\nfunction Home({SubmitBtn}) {\r\n    const [transactions, setTransactions] = useState([]);\r\n    const refNewBtn = useRef();\r\n\r\n    const showContainer = () => {\r\n        const historyContainer = document.getElementById('historyComponent');\r\n        historyContainer.classList.toggle('short');\r\n        const container = document.getElementById('newTransactionContainer');\r\n        container.classList.toggle('show');\r\n  \r\n        refNewBtn.current.value = \r\n          (container.classList.contains('show')) ? \r\n          'Cancel' :\r\n          'Add new transaction';\r\n      }\r\n\r\n    useEffect(() => {\r\n      dbService.collection(TRANSACTIONS).onSnapshot((snapshot) => {\r\n        const transactionArray = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n        setTransactions(transactionArray);\r\n      });\r\n    }, [])\r\n\r\n\r\n    return (\r\n      <>\r\n        <Balance transactions={transactions} />\r\n        <History transactions={transactions} />\r\n        <section className=\"addNewButton\">\r\n          <SubmitBtn type=\"button\" className=\"button\" onClick={showContainer} ref={refNewBtn} value='Add new transaction'>\r\n          </SubmitBtn>\r\n        </section>\r\n        <article id=\"newTransactionContainer\">\r\n          <TransactionFactory SubmitBtn={SubmitBtn}/>\r\n        </article>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport {Link, useLocation} from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n \r\n\r\n  const location = useLocation();\r\n  let title = \"\";\r\n\r\n    if (location.pathname === \"/\") {\r\n      title = \"HOME\";\r\n    } else if (location.pathname === \"/settings\") {\r\n      title = \"Settings\";\r\n    }\r\n\r\n  return (\r\n    <nav>\r\n      <Link to=\"/settings\">\r\n      &#10094;\r\n      </Link>\r\n      <span id=\"navTitle\">{title}</span>\r\n      <Link to=\"/\">\r\n      &#10095;\t\r\n      </Link>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport Settings from \"routes/Settings\";\r\nimport Home from \"routes/Home\";\r\nimport Nav from './Nav';\r\n\r\nfunction AppRouter({ categories, SubmitBtn }) {\r\n\r\n  return (\r\n    <Router>\r\n      <Nav />\r\n      <Switch>\r\n        <Route exact path=\"/settings\" >\r\n          <Settings categories={categories} SubmitBtn={SubmitBtn}/>\r\n        </Route>\r\n        <Route exact path=\"/\" >\r\n          <Home categories={categories} SubmitBtn={SubmitBtn} />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default AppRouter\r\n","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return (\r\n      <footer>\r\n        &copy; {new Date().getFullYear()} Expense Tracker - SOHYEON OH 오소현\r\n      </footer>\r\n    );\r\n}\r\n\r\nexport default Footer\r\n","import { dbService, CATEGORIES, MAINCOLOR } from 'fBase';\r\nimport React, {useEffect, useState} from 'react';\r\nimport AppRouter from \"routes/Router\";\r\nimport Footer from 'components/Footer';\r\nimport { changeBtnColor } from 'utilities/changeBtnColor';\r\n\r\nfunction App() {\r\n  const [categories, setCategories] = useState([]);\r\n  const [mainColor, setMainColor] = useState(\"\");\r\n  const [bgColor, setBgColor] = useState(\"\");\r\n  const {SubmitBtn} = changeBtnColor({mainColor});\r\n\r\n  useEffect(() => {\r\n    //get category list from db\r\n    dbService.collection(CATEGORIES).onSnapshot((snapshot) => {\r\n  \r\n      const categoryArray = snapshot.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.id\r\n      }));\r\n      setCategories(categoryArray);\r\n    });\r\n\r\n    //get mainColor from db\r\n    dbService.collection(MAINCOLOR).onSnapshot((snapshot) => {\r\n      const dbColor = snapshot.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.mainColor,\r\n      }));\r\n      setMainColor(dbColor[0].mainColor);\r\n      setBgColor(dbColor[0].bgColor);\r\n    })\r\n  \r\n    // return () => {}; //clean-up\r\n  }, []);\r\n\r\n\r\n  const styles = {\r\n    forBg: {backgroundColor: bgColor}\r\n  }\r\n  \r\n  \r\n  return (\r\n    <main className=\"App\" style={styles.forBg}>\r\n    <AppRouter categories={categories} SubmitBtn={SubmitBtn} />\r\n    <Footer />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import styled from 'styled-components';\r\n\r\nexport const changeBtnColor = ({ mainColor }) => {\r\n\r\n    // const Title = styled.span`\r\n    //     @import url(\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap\");\r\n    //     text-align: center;\r\n    //     font-size: 20px;\r\n    //     font-weight: 700;\r\n    //     font-family: Montserrat, sans-serif;\r\n    // `;\r\n\r\n    const SubmitBtn = styled.input`\r\n        background-color: ${mainColor};\r\n    `;\r\n    return {\r\n        SubmitBtn\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport \"./style/style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}