{"version":3,"sources":["fBase.js","utilities/RadioComponent.js","utilities/useForm.js","utilities/validate.js","components/CategoryFactory.js","utilities/DeleteButton.js","components/Category.js","components/CategoriesSection.js","routes/Settings.js","components/TransactionFactory.js","utilities/printComma.js","components/Transaction.js","components/History.js","components/Balance.js","routes/Home.js","routes/Nav.js","routes/Router.js","App.js","index.js"],"names":["TRANSACTIONS","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","CATEGORIES","dbService","firestore","RadioComponent","values","changeHandler","categories","slideRef","useRef","slideMoveHandler","slideDiv","current","classList","contains","remove","add","className","ref","htmlFor","onClick","type","name","id","value","onChange","filter","e","map","category","useForm","initialValues","onSubmit","validate","useState","setValues","errors","setErrors","isSubmit","setIsSubmit","setCategories","getCategories","a","collection","onSnapshot","snapshot","categoryArray","docs","doc","data","length","addTransactionFB","obj","set","addCategoryFB","useEffect","event","target","submitHandler","preventDefault","formType","transactionObj","date","Date","now","text","amount","console","log","categoryObj","test","CategoryFactory","required","placeholder","DeleteButton","itemId","onDeleteClick","window","confirm","delete","Category","newCategoryText","setNewCategoryText","isEditing","setIsEditing","UpdateHandler","update","prev","CategoriesSection","Settings","TransactionFactory","disabled","numToString","num","toString","replace","Transaction","isNewDate","refBtns","colorByType","toggle","History","copyTransactions","transactions","concat","sort","b","transaction","idx","Balance","total","reduce","acc","cur","income","parseInt","expense","Home","setTransactions","refNewBtn","transactionArray","container","document","getElementById","innerText","Nav","styled","span","location","useLocation","title","pathname","to","AppRouter","exact","path","App","getFullYear","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c6b99b93.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\"; \r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDR8tvZ_nXU_Yvf3m9fDSstpav1n0HCJGc\",\r\n    authDomain: \"expense-tracker-91c95.firebaseapp.com\",\r\n    projectId: \"expense-tracker-91c95\",\r\n    storageBucket: \"expense-tracker-91c95.appspot.com\",\r\n    messagingSenderId: \"982156523497\",\r\n    appId: \"1:982156523497:web:1f3a7dca886f9d5a4b3d78\"\r\n  };\r\n\r\n  export default firebase.initializeApp(firebaseConfig);\r\n\r\n  export const TRANSACTIONS = \"transactions\";\r\n  export const CATEGORIES = \"categories\";\r\n\r\n  export const dbService = firebase.firestore();","import React, {useRef} from 'react'\r\n\r\nfunction RadioComponent({values, changeHandler, categories}) {\r\n\r\n    const slideRef = useRef();\r\n\r\n    const slideMoveHandler = () => {\r\n      const slideDiv = slideRef.current;\r\n      if(!slideDiv.classList.contains('toRight')){\r\n        slideDiv.classList.remove('toLeft');\r\n        slideDiv.classList.add('toRight');\r\n      } else {\r\n        slideDiv.classList.remove('toRight');\r\n        slideDiv.classList.add('toLeft');\r\n      }\r\n\r\n      \r\n    }\r\n\r\n    \r\n\r\n    return (\r\n      <>  \r\n        <div className=\"radios\" >\r\n          <div className=\"checked\" ref={slideRef}></div>\r\n          <label htmlFor=\"typePlus\" className=\"labels\" onClick={slideMoveHandler}>+</label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"type\"\r\n            id=\"typePlus\"\r\n            className=\"transactionType\"\r\n            value=\"수입\"\r\n            onChange={changeHandler}\r\n          />\r\n          <label htmlFor=\"typeMinus\" className=\"labels\" onClick={slideMoveHandler}>-</label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"type\"\r\n            id=\"typeMinus\"\r\n            className=\"transactionType\"\r\n            value=\"지출\"\r\n            onChange={changeHandler}\r\n          />\r\n          \r\n        </div>\r\n        <select name=\"category\" onChange={changeHandler}>\r\n          <option>카테고리를 선택해주세요.</option>\r\n          {categories &&\r\n            categories.filter(e => e.type === values.type).map((e) => {\r\n              return (\r\n                <option key={e.id} value={e.category}>\r\n                  {e.category}\r\n                </option>\r\n              );\r\n            })}\r\n        </select>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default RadioComponent\r\n","import {useState, useEffect} from 'react';\r\nimport {CATEGORIES, dbService, TRANSACTIONS} from 'fBase';\r\n\r\nfunction useForm({ initialValues, onSubmit, validate}) {\r\n    const [values, setValues] = useState(initialValues);\r\n    const [errors, setErrors] = useState(\"\");\r\n    const [isSubmit, setIsSubmit] = useState(false);\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    const getCategories = async() => {\r\n        await dbService.collection(CATEGORIES).onSnapshot((snapshot) => {\r\n          const categoryArray = snapshot.docs.map((doc) =>({\r\n            id: doc.id,\r\n            ...doc.data(),\r\n          }))\r\n          setCategories(categoryArray);\r\n        });\r\n      };\r\n\r\n    if(categories.length === 0 ){ //첫 렌더링 때, 모든 카테고리 목록을 가져오기 위한 조건문\r\n        getCategories();\r\n    }\r\n    \r\n    const addTransactionFB = async(obj) => {\r\n        await dbService.collection(TRANSACTIONS).doc(`${obj.id}`).set(obj);\r\n    };\r\n\r\n    const addCategoryFB = async(obj) => {\r\n        await dbService.collection(CATEGORIES).add(obj);\r\n    }\r\n\r\n    const changeHandler = (event) => {\r\n        const {name, value} = event.target;\r\n        setValues({ ...values, [name]: value});\r\n        setIsSubmit(false);\r\n        // setErrors(validate(values));\r\n    };\r\n\r\n    //get categories from db by category type\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault()\r\n        setIsSubmit(true);\r\n        setErrors(validate(values));\r\n        \r\n        if(values.formType === TRANSACTIONS){\r\n            const transactionObj = {\r\n            type: values.type,\r\n            date: values.date,\r\n            id: Date.now(),\r\n            text: values.text,\r\n            amount: +values.amount, //type이 number로 db에 저장\r\n            category: values.category\r\n            };\r\n\r\n            addTransactionFB(transactionObj);\r\n        } \r\n        \r\n        else if(values.formType === CATEGORIES){\r\n            console.log(values);\r\n            const categoryObj = {\r\n                type: values.type,\r\n                category: values.category\r\n            }\r\n            addCategoryFB(categoryObj);\r\n        }\r\n\r\n      setValues(initialValues);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(isSubmit) {\r\n            onSubmit(values);\r\n        } \r\n        setIsSubmit(false);\r\n    }, [isSubmit, values, onSubmit]);\r\n\r\n    return {\r\n        values,\r\n        errors,\r\n        isSubmit,\r\n        changeHandler,\r\n        submitHandler,\r\n        categories,\r\n        getCategories\r\n    \r\n    }\r\n}\r\n\r\nexport default useForm;","export default function validate({ type, date, text, amount}){\r\n    const errors = {};\r\n\r\n    if(!date){\r\n        errors.date = \"날짜를 입력해주세요.\";\r\n    } else {\r\n        errors.date = null;\r\n    }\r\n    \r\n    if(!/^[0-9]/.test(amount)){\r\n        errors.amount = \"금액에는 숫자만 입력해주세요.\";\r\n    } else{\r\n        errors.amount = null;\r\n    }\r\n\r\n    return errors;\r\n}","import React from 'react'\r\nimport RadioComponent from 'utilities/RadioComponent';\r\nimport useForm from 'utilities/useForm';\r\nimport validate from 'utilities/validate';\r\nimport {CATEGORIES} from 'fBase';\r\n\r\nfunction CategoryFactory() {\r\n    const { values, errors, isSubmit, changeHandler, submitHandler} = useForm({\r\n        initialValues: {formType: CATEGORIES, type: \"지출\", category: \"\"},\r\n        onSubmit: (values) => {},\r\n        validate\r\n        });\r\n    return (\r\n      <>\r\n        <button>+</button>\r\n\r\n        <form onSubmit={submitHandler}>\r\n      \r\n            <RadioComponent values={values} changeHandler={changeHandler} />\r\n         \r\n            <label htmlFor=\"category\">카테고리 내용</label>\r\n            <input type=\"text\" name=\"category\" required value={values.category} onChange={changeHandler} placeholder=\"카테고리 내용을 입력해주세요.\"/>\r\n          \r\n          <input type=\"submit\" name=\"submit\" value=\"+\"/>\r\n        </form>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default CategoryFactory\r\n","import { TRANSACTIONS, dbService, CATEGORIES } from 'fBase';\r\nimport React from 'react';\r\n\r\nfunction DeleteButton({ formType, itemId }) {\r\n    const onDeleteClick = async() => {\r\n        const yes = window.confirm(\"내역을 삭제하시겠습니까?\");\r\n\r\n        if(yes){\r\n\r\n            if(formType === TRANSACTIONS){\r\n                await dbService.doc(`${TRANSACTIONS}/${itemId}`).delete();\r\n            }\r\n            else if(formType === CATEGORIES){\r\n                await dbService.doc(`${CATEGORIES}/${itemId}`).delete();\r\n            }\r\n            \r\n        }\r\n    }\r\n    return (\r\n        <button className=\"deleteBtn\" onClick={onDeleteClick}>X</button>\r\n    )\r\n}\r\n\r\nexport default DeleteButton\r\n","import React, {useState} from 'react';\r\nimport { CATEGORIES, dbService } from 'fBase';\r\nimport DeleteButton from 'utilities/DeleteButton';\r\n// import UpdateHandler from 'components/UpdateHandler';\r\n\r\nfunction Category({ category }) {\r\n    const [newCategoryText, setNewCategoryText] = useState(category.category);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    const onToggleHandler = () => {\r\n        setIsEditing(prev => !prev);\r\n    };\r\n\r\n    const onTextHandler = (e) => {\r\n        setNewCategoryText(e.target.value);\r\n    }\r\n    const UpdateHandler = async(e) => {\r\n        e.preventDefault();\r\n        await dbService.doc(`${CATEGORIES}/${category.id}`).update({\r\n            category: newCategoryText,\r\n        });\r\n        setIsEditing(false);\r\n    }\r\n    return (\r\n        <tr >\r\n        <td>\r\n            <DeleteButton formType={CATEGORIES} itemId={category.id} />\r\n        </td>\r\n        <td>{category.type}</td>\r\n        <td>{category.category}</td>\r\n         <td>\r\n            <button onClick={onToggleHandler}>Update</button>\r\n            {isEditing && \r\n                <form onSubmit={UpdateHandler}>\r\n                    <input type=\"text\" value={newCategoryText} onChange={onTextHandler}/>\r\n                    <input type=\"submit\"/>\r\n                </form>\r\n            }\r\n        </td>\r\n      </tr>\r\n    )\r\n}\r\n\r\nexport default Category\r\n","import React from 'react';\r\nimport CategoryFactory from \"components/CategoryFactory\";\r\nimport Category from 'components/Category';\r\n\r\nfunction CategoriesSection({ categories }) {\r\n\r\n  \r\n    return (\r\n      <div>\r\n        <CategoryFactory />\r\n        <h3>카테고리 설정</h3>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>TYPE</th>\r\n              <th>CATEGORY</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {categories &&\r\n              categories.map((category) => {\r\n                return <Category key={category.id}  category={category}/>;\r\n              })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default CategoriesSection\r\n","import CategoriesSection from 'components/CategoriesSection'\r\nimport React from 'react'\r\n\r\nfunction Settings({categories}) {\r\n    return (\r\n        <>\r\n         <article>\r\n             <CategoriesSection categories={categories}/>\r\n        </article>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings\r\n","import React from 'react';\r\nimport useForm from 'utilities/useForm';\r\nimport validate from 'utilities/validate';\r\nimport RadioComponent from '../utilities/RadioComponent';\r\nimport {TRANSACTIONS} from \"fBase\";\r\n\r\nfunction TransactionFactory() {\r\n  const {\r\n    values,\r\n    errors,\r\n    isSubmit,\r\n    changeHandler,\r\n    submitHandler,\r\n    categories,\r\n  } = useForm({\r\n    initialValues: {\r\n      formType: TRANSACTIONS,\r\n      type: \"지출\",\r\n      date: \"\",\r\n      text: \"\",\r\n      amount: 0,\r\n      category: \"\",\r\n    },\r\n    onSubmit: (values) => {},\r\n    validate,\r\n  });\r\n\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={submitHandler}>\r\n          <h3>Add New Transaction</h3>\r\n          <fieldset id=\"type\">\r\n\r\n            <RadioComponent\r\n              values={values}\r\n              changeHandler={changeHandler}\r\n              categories={categories}\r\n            />\r\n          </fieldset>\r\n        <fieldset id=\"info\">\r\n          <p>\r\n            <label htmlFor=\"date\">Date</label>\r\n            {errors.date && <span>{errors.date}</span>}\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              value={values.date}\r\n              onChange={changeHandler}\r\n              required\r\n            />\r\n          </p>\r\n          <p>\r\n            <label htmlFor=\"text\">Text</label>\r\n            <input\r\n              type=\"text\"\r\n              value={values.text}\r\n              onChange={changeHandler}\r\n              name=\"text\"\r\n              id=\"text\"\r\n              placeholder=\"Enter text\"\r\n              required\r\n            />\r\n          </p>\r\n          <p>\r\n            <label htmlFor=\"amount\">Amount</label>\r\n            {errors.amount && <span>{errors.amount}</span>}\r\n            <input\r\n              type=\"number\"\r\n              id=\"amount\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={changeHandler}\r\n              required\r\n            />\r\n          </p>\r\n        </fieldset>\r\n\r\n        <input type=\"submit\" value=\"Add transaction\" disabled={isSubmit} />\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TransactionFactory\r\n","export default function numToString(num){\r\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  };","import React, {useRef} from \"react\";\r\nimport DeleteButton from \"utilities/DeleteButton\";\r\nimport { TRANSACTIONS } from \"fBase\";\r\nimport numToString from 'utilities/printComma';\r\n\r\nfunction Transaction({ transactionObj, isNewDate }) {\r\n  const type = transactionObj.type;\r\n  const refBtns = useRef();\r\n  let colorByType = \"\";\r\n\r\n  if (type === \"수입\") {\r\n    colorByType = \"moneyPlus\";\r\n  } else if (type === \"지출\") {\r\n    colorByType = \"moneyMinus\";\r\n  }\r\n\r\n  const showBtnContainer = () => {\r\n    refBtns.current.classList.toggle('clickedBtnContainer');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isNewDate ? <p className=\"date\">{transactionObj.date}</p> : \"\"}\r\n      <div className={`${colorByType} transactionContainer`} onClick={showBtnContainer}>\r\n        <div className=\"buttonContainer\" ref={refBtns}>\r\n          <DeleteButton formType={TRANSACTIONS} itemId={transactionObj.id} />\r\n          <DeleteButton formType={TRANSACTIONS} itemId={transactionObj.id} />\r\n        </div>\r\n        <div className=\"textContainer\">\r\n          <span className=\"text\">\r\n            {transactionObj.text}\r\n            <span className=\"category\">{transactionObj.category}</span>\r\n          </span>\r\n          <span className=\"amount\">{numToString(transactionObj.amount)}원</span>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Transaction;\r\n","import React from 'react';\r\nimport Transaction from \"components/Transaction\";\r\n\r\nfunction History({ transactions }) {\r\n\r\n    const copyTransactions = transactions.concat();\r\n\r\n    copyTransactions.sort((a, b) => { //sorting by date (desc)\r\n      return a.date > b.date ? -1 : 1;\r\n    });\r\n\r\n    return (\r\n      <article className=\"historyComponent\">\r\n        <h3>History</h3>\r\n        <section id=\"historyList\" className=\"list\">\r\n            {copyTransactions && copyTransactions.map((transaction,idx) => {\r\n                let isNewDate = true;\r\n                if(idx === 0) { //맨 최근 거래내역 날짜 추가 위한 조건문\r\n                  isNewDate = true;\r\n                }\r\n                else if(idx > 0 && idx < copyTransactions.length-1){\r\n                  if (transaction.date !== copyTransactions[idx - 1].date) {\r\n                    isNewDate = true;\r\n                  } else {\r\n                    isNewDate = false;\r\n                  }\r\n                }\r\n\r\n                \r\n\r\n                return (\r\n                    <Transaction\r\n                        key={transaction.id}\r\n                        transactionObj={transaction}\r\n                        isNewDate={isNewDate}\r\n                    />\r\n                    \r\n                )\r\n            })}\r\n            \r\n        </section>\r\n      </article>\r\n    );\r\n}\r\n\r\nexport default History\r\n","import React from \"react\";\r\nimport numToString from 'utilities/printComma';\r\n\r\nfunction Balance({ transactions }) {\r\n  const copyTransactions = transactions.concat();\r\n\r\n    const total = numToString(copyTransactions\r\n                      .map((e) => {\r\n                          if(e.type === '수입') { return +e.amount}\r\n                          else if(e.type === '지출') { return -e.amount}\r\n                      }) // return amount with +/- set by type\r\n                      .reduce((acc, cur) => (acc += cur), 0)); //get total\r\n  \r\n\r\n  const income = numToString(copyTransactions\r\n    .filter((e) => e.type === \"수입\") //filter by type\r\n    .map((e) => parseInt(e.amount)) // return only amount which is changed string to int\r\n    .reduce((acc, cur) => (acc += cur), 0)); //get total\r\n\r\n  const expense = numToString(copyTransactions\r\n    .filter((e) => e.type === \"지출\")\r\n    .map((e) => parseInt(e.amount))\r\n    .reduce((acc, cur) => (acc += cur), 0));\r\n\r\n    \r\n\r\n  return (\r\n    <article className=\"balanceComponent\">\r\n      <section className=\"balance\">\r\n        <p className=\"name\">YOUR BALANCE</p>\r\n        <p id=\"money\">{total}원</p>\r\n      </section>\r\n      <div>\r\n        <section className=\"each income\">\r\n          <p className=\"name\">INCOME</p>\r\n          <p id=\"moneyPlus\" className=\"money plus\">\r\n            +{income}원\r\n          </p>\r\n        </section>\r\n        <section className=\"each expense\">\r\n          <p className=\"name\">EXPENSE</p>\r\n          <p id=\"moneyMinus\" className=\"money minus\">\r\n            -{expense}원\r\n          </p>\r\n        </section>\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default Balance;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport TransactionFactory from 'components/TransactionFactory';\r\nimport History from 'components/History';\r\nimport Balance from 'components/Balance';\r\nimport {dbService, TRANSACTIONS} from 'fBase';\r\n\r\n\r\nfunction Home() {\r\n    const [transactions, setTransactions] = useState([]);\r\n    const refNewBtn = useRef();\r\n\r\n    useEffect(() => {\r\n      dbService.collection(TRANSACTIONS).onSnapshot((snapshot) => {\r\n        const transactionArray = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n        setTransactions(transactionArray);\r\n      });\r\n    }, [])\r\n\r\n    const showContainer = () => {\r\n      const container = document.getElementById('newTransactionContainer');\r\n      container.classList.toggle('show');\r\n\r\n      refNewBtn.current.innerText = \r\n        (container.classList.contains('show')) ? \r\n        'Cancel' :\r\n        'Add new transaction';\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Balance transactions={transactions} />\r\n        <History transactions={transactions} />\r\n        <article id=\"newTransactionContainer\" className=\"\">\r\n          <TransactionFactory />\r\n        </article>\r\n        <div className=\"newBtnContainer\">\r\n          <button className=\"button\" onClick={showContainer} ref={refNewBtn}>\r\n            Add new transaction\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport {Link, useLocation} from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nfunction Nav() {\r\n  const Title = styled.span`\r\n    @import url(\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap\");\r\n    text-align: center;\r\n    font-size: 20px;\r\n    font-weight: 700;\r\n    font-family: Montserrat, sans-serif;\r\n  `;\r\n\r\n  const location = useLocation();\r\n  let title = \"\";\r\n\r\n    if (location.pathname === \"/\") {\r\n      title = \"HOME\";\r\n    } else if (location.pathname === \"/settings\") {\r\n      title = \"Settings\";\r\n    }\r\n\r\n  return (\r\n    <nav>\r\n      <Link to=\"/settings\">\r\n      &#10094;\r\n      </Link>\r\n      <span>{title}</span>\r\n      <Link to=\"/\">\r\n      &#10095;\t\r\n      </Link>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport Settings from \"routes/Settings\";\r\nimport Home from \"routes/Home\";\r\nimport Nav from './Nav';\r\n\r\nfunction AppRouter({ categories }) {\r\n  return (\r\n    <Router>\r\n      <Nav />\r\n      <Switch>\r\n        <Route exact path=\"/settings\" >\r\n          <Settings categories={categories}/>\r\n        </Route>\r\n        <Route exact path=\"/\" >\r\n          <Home categories={categories}/>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default AppRouter\r\n","import { dbService, CATEGORIES } from 'fBase';\r\nimport React, {useEffect, useState} from 'react';\r\nimport AppRouter from \"routes/Router\";\r\n\r\nfunction App() {\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  useEffect(() => {\r\n    dbService.collection(CATEGORIES).onSnapshot((snapshot) => {\r\n  \r\n      const categoryArray = snapshot.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.id\r\n      }));\r\n      setCategories(categoryArray);\r\n    })\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <main className=\"App\">\r\n    <AppRouter categories={categories}/>\r\n    <footer>\r\n      &copy; {new Date().getFullYear()} Expense Tracker - SOHYEON OH 오소현\r\n    </footer>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport \"./style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}